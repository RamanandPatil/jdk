/*
 * Copyright (c) 2021, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 *
 */

#include "precompiled.hpp"
#include "classfile/classLoaderDataGraph.hpp"
#include "classfile/javaClasses.inline.hpp"
#include "jfr/jfrEvents.hpp"
#include "jfr/jni/jfrJavaSupport.hpp"
#include "jfr/periodic/jfrFinalizerEvent.hpp"
#include "jfr/support/jfrSymbolTable.hpp"
#include "jfr/utilities/jfrTime.hpp"
#include "jfr/utilities/jfrTypes.hpp"
#include "oops/instanceKlass.inline.hpp"
#include "runtime/mutexLocker.hpp"
#include "runtime/thread.inline.hpp"

static oop get_codesource(oop pd, Thread* thread) {
  assert(pd != NULL, "invariant");
  assert(thread != NULL, "invariant");
  JavaValue result(T_OBJECT);
  JfrJavaArguments args(&result);
  args.set_klass(pd->klass());
  args.set_name("codesource");
  args.set_signature("Ljava/security/CodeSource;");
  args.set_receiver(pd);
  JfrJavaSupport::get_field(&args, thread);
  return result.get_oop();
}

// Caller needs ResourceMark
static const char* get_locationNoFragString(oop codesource, Thread* thread) {
  assert(codesource != NULL, "invariant");
  assert(thread != NULL, "invariant");
  JavaValue result(T_OBJECT);
  JfrJavaArguments args(&result);
  args.set_klass(codesource->klass());
  args.set_name("locationNoFragString");
  args.set_signature("Ljava/lang/String;");
  args.set_receiver(codesource);
  JfrJavaSupport::get_field(&args, thread);
  const oop string_oop = result.get_oop();
  return string_oop != NULL ? JfrJavaSupport::c_str(string_oop, thread) : NULL;
}

// Caller needs ResourceMark
static const char* codesource(const InstanceKlass* ik, Thread* thread) {
  assert(ik != NULL, "invariant");
  assert(thread != NULL, "invariant");
  oop pd = java_lang_Class::protection_domain(ik->java_mirror());
  if (pd == NULL) {
    return NULL;
  }
  oop codesource = get_codesource(pd, thread);
  return codesource != NULL ? get_locationNoFragString(codesource, thread) : NULL;
}

static void send_event(const InstanceKlass* ik, const JfrTicks& timestamp) {
  assert(ik, "invariant");
  assert(ik->has_finalizer(), "invariant");
  EventFinalizer event(UNTIMED);
  event.set_endtime(timestamp);
  event.set_overridingClass(ik);
  Thread* const thread = Thread::current();
  ResourceMark rm(thread);
  const char* const url = codesource(ik, thread);
  const traceid symbol_id = url != NULL ? JfrSymbolTable::add(url) : 0;
  event.set_codeSource(symbol_id);
  event.commit();
}

void JfrFinalizerEvent::send_unload_event(const InstanceKlass* ik) {
  assert(ik != NULL, "invariant");
  assert(ik->has_finalizer(), "invariant");
  send_event(ik, JfrTicks::now());
}

// Finalizer events generated by the periodic task thread
// during the same pass will all have the same timestamp.
static JfrTicks invocation_time;

static void finalizer_event_callback(Klass* klass) {
  assert(klass != NULL, "invariant");
  if (!klass->is_instance_klass()) {
    return;
  }
  const InstanceKlass* const ik = InstanceKlass::cast(klass);
  if (ik->has_finalizer()) {
    send_event(ik, invocation_time);
  }
}

void JfrFinalizerEvent::generate_events() {
  invocation_time = JfrTicks::now();
  MutexLocker cld_lock(ClassLoaderDataGraph_lock);
  ClassLoaderDataGraph::classes_do(&finalizer_event_callback);
}
